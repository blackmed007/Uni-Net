generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  first_name     String
  last_name      String
  email          String          @unique
  password       String
  status         Boolean?
  profile_url    String?
  gender         String?
  cityId         String?
  universityId   String?
  role           String
  events         UsersOnEvents[]
  bookmarks      Bookmark[]
  eventBookmarks EventBookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updatedAt")

  city         City?          @relation(fields: [cityId], references: [id], onDelete: SetNull)
  university   University?    @relation(fields: [universityId], references: [id], onDelete: SetNull)
  UserActivity UserActivity[]
}

model Event {
  id               String   @id @default(uuid())
  name             String
  description      String
  datetime         DateTime
  location         String
  event_type       String
  event_status     String
  organizer        String
  max_participants Int
  agenda           Json?
  speaker          Json
  event_thumbnail  String

  participants   UsersOnEvents[]
  eventBookmarks EventBookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model UsersOnEvents {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  joinedAt DateTime @default(now())

  @@id([userId, eventId])
}

model University {
  id        String   @id @default(uuid())
  name      String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model City {
  id        String   @id @default(uuid())
  name      String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model Blog {
  id                 String @id @default(uuid())
  title              String
  content            String
  author             String
  category           String
  author_profile_url String
  status             String
  excerpt            String
  blog_image         String
  views              Int    @default(0)

  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model Bookmark {
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
}

model EventBookmark {
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  activity  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
